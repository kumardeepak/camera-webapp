{"version":3,"sources":["api/face.js","views/VideoInput.js","App.js","serviceWorker.js","index.js"],"names":["loadModels","_loadModels","apply","this","arguments","_callee","MODEL_URL","regenerator_default","a","wrap","_context","prev","next","process","faceapi","stop","getFullFaceDescription","_x","_getFullFaceDescription","_callee2","blob","inputSize","OPTION","useTinyModel","img","fullDesc","_args2","_context2","length","undefined","scoreThreshold","sent","withFaceLandmarks","abrupt","VideoInput","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","asyncToGenerator","mark","setInputDevice","navigator","mediaDevices","enumerateDevices","then","_ref2","devices","setState","facingMode","startCapture","interval","setInterval","capture","_callee3","_context3","webcam","current","getScreenshot","detections","map","fd","detection","React","createRef","state","match","clearInterval","_this$state","videoConstraints","camera","width","height","drawBox","i","_H","box","_W","_X","_Y","_y","react_default","createElement","key","style","position","border","borderColor","transform","concat","backgroundColor","marginTop","color","_label","className","display","flexDirection","alignItems","react_webcam_default","audio","ref","screenshotFormat","Component","App","views_VideoInput","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77fdcf59.chunk.js","sourcesContent":["import * as faceapi from 'face-api.js';\n\n// Load models and weights\nexport async function loadModels() {\n  const MODEL_URL = process.env.PUBLIC_URL + '/models';\n  await faceapi.loadTinyFaceDetectorModel(MODEL_URL);\n  await faceapi.loadFaceLandmarkTinyModel(MODEL_URL);\n}\n\nexport async function getFullFaceDescription(blob, inputSize = 512) {\n  // tiny_face_detector options\n  let scoreThreshold = 0.5;\n  const OPTION = new faceapi.TinyFaceDetectorOptions({\n    inputSize,\n    scoreThreshold\n  });\n  const useTinyModel = true;\n\n  // fetch image to api\n  let img = await faceapi.fetchImage(blob);\n\n  // detect all faces and generate full description from image\n  // including landmark and descriptor of each face\n  let fullDesc = await faceapi\n    .detectAllFaces(img, OPTION)\n    .withFaceLandmarks(useTinyModel)\n  return fullDesc;\n}\n\n","import React, { Component } from 'react';\nimport Webcam from 'react-webcam';\nimport { loadModels, getFullFaceDescription } from '../api/face';\n\nconst WIDTH = 320;\nconst HEIGHT = 480;\nconst inputSize = 160;\n\nclass VideoInput extends Component {\n  constructor(props) {\n    super(props);\n    this.webcam = React.createRef();\n    this.state = {\n      fullDesc: null,\n      detections: null,\n      match: null,\n      facingMode: null\n    };\n  }\n\n  componentWillMount = async () => {\n    await loadModels();\n    this.setInputDevice();\n  };\n\n  setInputDevice = () => {\n    navigator.mediaDevices.enumerateDevices().then(async devices => {\n      // let inputDevice = await devices.filter(\n      //   device => device.kind === 'videoinput'\n      // );\n      await this.setState({\n        facingMode: 'user'\n      });\n      // if (inputDevice.length < 2) {\n      //   await this.setState({\n      //     facingMode: 'user'\n      //   });\n      // } else {\n      //   await this.setState({\n      //     facingMode: { exact: 'environment' }\n      //   });\n      // }\n      this.startCapture();\n    });\n  };\n\n  startCapture = () => {\n    this.interval = setInterval(() => {\n      this.capture();\n    }, 1500);\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  capture = async () => {\n    if (!!this.webcam.current) {\n      await getFullFaceDescription(\n        this.webcam.current.getScreenshot(),\n        inputSize\n      ).then(fullDesc => {\n        if (!!fullDesc) {\n          this.setState({\n            detections: fullDesc.map(fd => fd.detection),\n          });\n        }\n      });\n    }\n  };\n\n  render() {\n    const { detections, match, facingMode } = this.state;\n    let videoConstraints = null;\n    let camera = '';\n    if (!!facingMode) {\n      videoConstraints = {\n        width: WIDTH,\n        height: HEIGHT,\n        facingMode: facingMode\n      };\n      if (facingMode === 'user') {\n        camera = 'Front';\n      } else {\n        camera = 'Back';\n      }\n    }\n\n    let drawBox = null;\n    if (!!detections) {\n      drawBox = detections.map((detection, i) => {\n        let _H = detection.box.height;\n        let _W = detection.box.width;\n        let _X = detection.box._x;\n        let _Y = detection.box._y;\n        return (\n          <div key={i}>\n            <div\n              style={{\n                position: 'absolute',\n                border: 'solid',\n                borderColor: 'blue',\n                height: _H,\n                width: _W,\n                transform: `translate(${_X}px,${_Y}px)`\n              }}\n            >\n              {!!match && !!match[i] ? (\n                <p\n                  style={{\n                    backgroundColor: 'blue',\n                    border: 'solid',\n                    borderColor: 'blue',\n                    width: _W,\n                    marginTop: 0,\n                    color: '#fff',\n                    transform: `translate(-3px,${_H}px)`\n                  }}\n                >\n                  {match[i]._label === 'unknown' ? 'human face' : match[i]._label}\n                </p>\n              ) : null}\n            </div>\n          </div>\n        );\n      });\n    }\n\n    return (\n      <div\n        className=\"Camera\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        }}\n      >\n        <p>Camera: {camera}</p>\n        <div\n          style={{\n            width: WIDTH,\n            height: HEIGHT\n          }}\n        >\n          <div style={{ position: 'relative', width: WIDTH }}>\n            {!!videoConstraints ? (\n              <div style={{ position: 'absolute' }}>\n                <Webcam\n                  audio={false}\n                  width={WIDTH}\n                  height={HEIGHT}\n                  ref={this.webcam}\n                  screenshotFormat=\"image/jpeg\"\n                  videoConstraints={videoConstraints}\n                />\n              </div>\n            ) : null}\n            {!!drawBox ? drawBox : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default VideoInput;","import React, { Component } from 'react';\nimport './App.css';\n\nimport VideoInput from './views/VideoInput';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <VideoInput />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}