{"version":3,"sources":["api/face.js","views/VideoInput.js","App.js","serviceWorker.js","index.js"],"names":["loadModels","_loadModels","apply","this","arguments","_callee","MODEL_URL","regenerator_default","a","wrap","_context","prev","next","process","faceapi","stop","getFullFaceDescription","_x","_getFullFaceDescription","_callee2","blob","inputSize","OPTION","useTinyModel","img","fullDesc","_args2","_context2","length","undefined","scoreThreshold","sent","withFaceLandmarks","abrupt","require","VideoInput","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","asyncToGenerator","mark","setInputDevice","navigator","mediaDevices","enumerateDevices","then","_ref2","devices","inputDevice","filter","device","kind","console","log","setState","facingMode","startCapture","interval","setInterval","capture","_callee3","_context3","webcam","current","getScreenshot","detections","map","fd","detection","React","createRef","state","descriptors","faceMatcher","match","clearInterval","_this$state","videoConstraints","camera","width","height","drawBox","i","_H","box","_W","_X","_Y","_y","react_default","createElement","key","style","position","border","borderColor","transform","concat","backgroundColor","marginTop","color","_label","className","display","flexDirection","alignItems","react_webcam_default","audio","ref","screenshotFormat","Component","window","TextDecoder","TextEncoder","App","views_VideoInput","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5948e8a.chunk.js","sourcesContent":["import * as faceapi from 'face-api.js';\n\n// Load models and weights\nexport async function loadModels() {\n  const MODEL_URL = process.env.PUBLIC_URL + '/models';\n  await faceapi.loadTinyFaceDetectorModel(MODEL_URL);\n  await faceapi.loadFaceLandmarkTinyModel(MODEL_URL);\n  // await faceapi.loadFaceRecognitionModel(MODEL_URL);\n}\n\nexport async function getFullFaceDescription(blob, inputSize = 512) {\n  // tiny_face_detector options\n  let scoreThreshold = 0.5;\n  const OPTION = new faceapi.TinyFaceDetectorOptions({\n    inputSize,\n    scoreThreshold\n  });\n  const useTinyModel = true;\n\n  // fetch image to api\n  let img = await faceapi.fetchImage(blob);\n\n  // detect all faces and generate full description from image\n  // including landmark and descriptor of each face\n  let fullDesc = await faceapi\n    .detectAllFaces(img, OPTION)\n    .withFaceLandmarks(useTinyModel)\n    // .withFaceDescriptors();\n  return fullDesc;\n}\n\nconst maxDescriptorDistance = 0.5;\nexport async function createMatcher(faceProfile) {\n  // Create labeled descriptors of member from profile\n  let members = Object.keys(faceProfile);\n  let labeledDescriptors = members.map(\n    member =>\n      new faceapi.LabeledFaceDescriptors(\n        faceProfile[member].name,\n        faceProfile[member].descriptors.map(\n          descriptor => new Float32Array(descriptor)\n        )\n      )\n  );\n\n  // Create face matcher (maximum descriptor distance is 0.5)\n  let faceMatcher = new faceapi.FaceMatcher(\n    labeledDescriptors,\n    maxDescriptorDistance\n  );\n  return faceMatcher;\n}\n","import React, { Component } from 'react';\n// import { withRouter } from 'react-router-dom';\nimport Webcam from 'react-webcam';\nimport { loadModels, getFullFaceDescription, createMatcher } from '../api/face';\n\n\n// Import face profile\nconst JSON_PROFILE = require('../descriptors/bnk48.json');\n\nconst WIDTH = 420;\nconst HEIGHT = 420;\nconst inputSize = 160;\n\nclass VideoInput extends Component {\n  constructor(props) {\n    super(props);\n    this.webcam = React.createRef();\n    this.state = {\n      fullDesc: null,\n      detections: null,\n      descriptors: null,\n      faceMatcher: null,\n      match: null,\n      facingMode: null\n    };\n  }\n\n  componentWillMount = async () => {\n    await loadModels();\n    // this.setState({ faceMatcher: await createMatcher(JSON_PROFILE) });\n    this.setInputDevice();\n  };\n\n  setInputDevice = () => {\n    navigator.mediaDevices.enumerateDevices().then(async devices => {\n      let inputDevice = await devices.filter(\n        device => device.kind === 'videoinput'\n      );\n      console.log(inputDevice)\n      await this.setState({\n        facingMode: 'user'\n      });\n      // if (inputDevice.length < 2) {\n      //   await this.setState({\n      //     facingMode: 'user'\n      //   });\n      // } else {\n      //   await this.setState({\n      //     facingMode: { exact: 'environment' }\n      //   });\n      // }\n      this.startCapture();\n    });\n  };\n\n  startCapture = () => {\n    this.interval = setInterval(() => {\n      this.capture();\n    }, 1500);\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  capture = async () => {\n    if (!!this.webcam.current) {\n      await getFullFaceDescription(\n        this.webcam.current.getScreenshot(),\n        inputSize\n      ).then(fullDesc => {\n        if (!!fullDesc) {\n          this.setState({\n            detections: fullDesc.map(fd => fd.detection),\n            // descriptors: fullDesc.map(fd => fd.descriptor)\n          });\n        }\n      });\n\n      // if (!!this.state.descriptors && !!this.state.faceMatcher) {\n      //   let match = await this.state.descriptors.map(descriptor =>\n      //     this.state.faceMatcher.findBestMatch(descriptor)\n      //   );\n      //   this.setState({ match });\n      // }\n    }\n  };\n\n  render() {\n    const { detections, match, facingMode } = this.state;\n    console.log(match)\n    console.log(facingMode)\n    let videoConstraints = null;\n    let camera = '';\n    if (!!facingMode) {\n      videoConstraints = {\n        width: WIDTH,\n        height: HEIGHT,\n        facingMode: facingMode\n      };\n      if (facingMode === 'user') {\n        camera = 'Front';\n      } else {\n        camera = 'Back';\n      }\n    }\n\n    let drawBox = null;\n    if (!!detections) {\n      drawBox = detections.map((detection, i) => {\n        let _H = detection.box.height + 50;\n        let _W = detection.box.width;\n        let _X = detection.box._x;\n        let _Y = detection.box._y - 50;\n        return (\n          <div key={i}>\n            <div\n              style={{\n                position: 'absolute',\n                border: 'solid',\n                borderColor: 'blue',\n                height: _H,\n                width: _W,\n                transform: `translate(${_X}px,${_Y}px)`\n              }}\n            >\n              {!!match && !!match[i] ? (\n                <p\n                  style={{\n                    backgroundColor: 'blue',\n                    border: 'solid',\n                    borderColor: 'blue',\n                    width: _W,\n                    marginTop: 0,\n                    color: '#fff',\n                    transform: `translate(-3px,${_H}px)`\n                  }}\n                >\n                  {match[i]._label === 'unknown' ? 'human face' : match[i]._label}\n                </p>\n              ) : null}\n            </div>\n          </div>\n        );\n      });\n    }\n\n    return (\n      <div\n        className=\"Camera\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        }}\n      >\n        <p>Camera: {camera}</p>\n        <div\n          style={{\n            width: WIDTH,\n            height: HEIGHT\n          }}\n        >\n          <div style={{ position: 'relative', width: WIDTH }}>\n            {!!videoConstraints ? (\n              <div style={{ position: 'absolute' }}>\n                <Webcam\n                  audio={false}\n                  width={WIDTH}\n                  height={HEIGHT}\n                  ref={this.webcam}\n                  screenshotFormat=\"image/jpeg\"\n                  videoConstraints={videoConstraints}\n                />\n              </div>\n            ) : null}\n            {!!drawBox ? drawBox : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// export default withRouter(VideoInput);\nexport default VideoInput;","import React, { Component } from 'react';\nimport './App.css';\n\nimport VideoInput from './views/VideoInput';\nimport { TextDecoder,TextEncoder } from 'text-encoding';\n\nif (!window['TextDecoder']) {\n  window['TextDecoder'] = TextDecoder;\n}\nif (!window['TextEncoder']) {\n  window['TextEncoder'] = TextEncoder;\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <VideoInput />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}